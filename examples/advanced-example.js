const PancakeSwapIntegration = require('../src/PancakeSwapIntegration');

// Á§∫‰æã‰ª£Â∏ÅÂú∞ÂùÄ
const TOKENS = {
  CAKE: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',
  BUSD: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56'
};

async function demonstrateAdvancedFeatures() {
  console.log('üöÄ PancakeSwapÈ´òÁ∫ßÂäüËÉΩÊºîÁ§∫\n');
  
  const pancakeswap = new PancakeSwapIntegration();
  
  try {
    // 1. ÊâπÈáèÊªëÁÇπÂàÜÊûêÊºîÁ§∫
    console.log('üìä 1. ÊâπÈáèÊªëÁÇπÂàÜÊûêÊºîÁ§∫');
    console.log('=' .repeat(50));
    
    const slippageAmounts = [100, 500, 1000, 5000, 10000];
    const batchResult = await pancakeswap.calculateSlippageBatch(TOKENS.CAKE, slippageAmounts);
    
    console.log(`\nüéØ ${batchResult.tokenInfo.symbol} ÊâπÈáèÊªëÁÇπÂàÜÊûêÁªìÊûú:`);
    batchResult.results.forEach(result => {
      if (!result.error) {
        const risk = result.slippagePercentage < 1 ? 'üü¢ ‰Ωé' : 
                    result.slippagePercentage < 3 ? 'üü° ‰∏≠' : 'üî¥ È´ò';
        console.log(`   ${result.amountFormatted}: ${result.slippagePercentage.toFixed(2)}% ÊªëÁÇπ (${risk}È£éÈô©)`);
      }
    });
    
    if (batchResult.summary.recommendedMaxAmount) {
      console.log(`\nüí° Êé®Ëçê: ${batchResult.summary.recommendedMaxAmount.message}`);
    }
    
    // 2. È´òÁ∫ß‰ª∑Ê†ºÂΩ±ÂìçÂàÜÊûêÊºîÁ§∫
    console.log('\n\nüí• 2. È´òÁ∫ß‰ª∑Ê†ºÂΩ±ÂìçÂàÜÊûêÊºîÁ§∫');
    console.log('=' .repeat(50));
    
    const customPercentages = [0.1, 0.5, 1, 2, 5];
    const priceImpactResult = await pancakeswap.calculateAdvancedPriceImpact(
      TOKENS.CAKE, 
      customPercentages
    );
    
    console.log(`\nüéØ ${priceImpactResult.tokenInfo.symbol} ‰ª∑Ê†ºÂΩ±ÂìçÂàÜÊûê:`);
    priceImpactResult.results.forEach(result => {
      if (!result.error) {
        console.log(`   ${result.riskLevel} ${result.marketCapPercentage}% Â∏ÇÂÄº: ${result.priceImpact.toFixed(2)}% ÂΩ±Âìç`);
        console.log(`     Âª∫ËÆÆ: ${result.recommendation}`);
      }
    });
    
    console.log(`\nüîç ÊÄª‰ΩìËØÑ‰º∞: ${priceImpactResult.analysis.liquidityAssessment}`);
    console.log(`üíº ‰∫§ÊòìÂª∫ËÆÆ: ${priceImpactResult.analysis.tradingRecommendation}`);
    
    // 3. ÁºìÂ≠òÁ≥ªÁªüÊºîÁ§∫
    console.log('\n\nüóÇÔ∏è 3. ÁºìÂ≠òÁ≥ªÁªüÊºîÁ§∫');
    console.log('=' .repeat(50));
    
    console.log('üìä ÁºìÂ≠òÁä∂ÊÄÅ:');
    Object.entries(pancakeswap.cache).forEach(([type, cache]) => {
      console.log(`   ${type}: ${cache.size} È°π`);
    });
    
    // ÊºîÁ§∫ÁºìÂ≠òÊïàÊûú - Á¨¨‰∫åÊ¨°Ë∞ÉÁî®‰ºöÊõ¥Âø´
    console.log('\n‚è±Ô∏è ÊµãËØïÁºìÂ≠òÊïàÊûú (Á¨¨‰∫åÊ¨°Ë∞ÉÁî®Â∫îËØ•Êõ¥Âø´):');
    
    const start1 = Date.now();
    await pancakeswap.getTokenInfo(TOKENS.CAKE);
    const time1 = Date.now() - start1;
    console.log(`   È¶ñÊ¨°Ë∞ÉÁî®: ${time1}ms`);
    
    const start2 = Date.now();
    await pancakeswap.getTokenInfo(TOKENS.CAKE);
    const time2 = Date.now() - start2;
    console.log(`   ÁºìÂ≠òË∞ÉÁî®: ${time2}ms (Âä†ÈÄü ${((time1 - time2) / time1 * 100).toFixed(1)}%)`);
    
    // 4. Êô∫ËÉΩÈÖçÂØπÊºîÁ§∫
    console.log('\n\nüß† 4. Êô∫ËÉΩÈÖçÂØπÊºîÁ§∫');
    console.log('=' .repeat(50));
    
    console.log('üîç ‰∏∫WBNBÂØªÊâæÊúÄ‰Ω≥‰∫§ÊòìÂØπ...');
    const bestPair = await pancakeswap.findBestBasePair('0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c');
    if (bestPair) {
      console.log(`‚úÖ ÊâæÂà∞ÊúÄ‰Ω≥ÈÖçÂØπ: WBNB/${bestPair.symbol}`);
      
      // ÊºîÁ§∫ÁõëÊéßWBNB
      const wbnbMonitor = await pancakeswap.monitorLiquidityPool('0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c');
      console.log(`üìä ÂºÄÂßãÁõëÊéß: ${wbnbMonitor.pairName}`);
    }
    
    // 5. ÈîôËØØÂ§ÑÁêÜÂíåÂª∫ËÆÆÊºîÁ§∫
    console.log('\n\nüõ°Ô∏è 5. ÈîôËØØÂ§ÑÁêÜÂíåÂª∫ËÆÆÊºîÁ§∫');
    console.log('=' .repeat(50));
    
    try {
      // Â∞ùËØï‰∏Ä‰∏™‰∏çÂ≠òÂú®ÁöÑ‰∫§ÊòìÂØπ
      await pancakeswap.getPairReserves('0x0000000000000000000000000000000000000001', TOKENS.BUSD);
    } catch (error) {
      console.log('‚ùå È¢ÑÊúüÈîôËØØ (ÊºîÁ§∫):', error.message);
      
      // ÊºîÁ§∫Âª∫ËÆÆÂäüËÉΩ
      const suggestions = await pancakeswap.suggestAlternativePairs(TOKENS.CAKE);
      console.log('üí° Á≥ªÁªüÂª∫ËÆÆÁöÑÂèØÁî®‰∫§ÊòìÂØπ:');
      suggestions.forEach(suggestion => {
        console.log(`   ‚Ä¢ CAKE/${suggestion.symbol}`);
      });
    }
    
    console.log('\n‚úÖ È´òÁ∫ßÂäüËÉΩÊºîÁ§∫ÂÆåÊàêÔºÅ');
    console.log('\nüìù ÊÄªÁªì:');
    console.log('   ‚Ä¢ ÊâπÈáèÊªëÁÇπÂàÜÊûêÂèØ‰ª•Âø´ÈÄüËØÑ‰º∞‰∏çÂêå‰∫§ÊòìÈáèÁöÑÈ£éÈô©');
    console.log('   ‚Ä¢ È´òÁ∫ß‰ª∑Ê†ºÂΩ±ÂìçÂàÜÊûêÊèê‰æõËØ¶ÁªÜÁöÑÈ£éÈô©ËØÑ‰º∞ÂíåÂª∫ËÆÆ');
    console.log('   ‚Ä¢ ÁºìÂ≠òÁ≥ªÁªüÊòæËëóÊèêÈ´ò‰∫ÜÈáçÂ§çÊü•ËØ¢ÁöÑÊÄßËÉΩ');
    console.log('   ‚Ä¢ Êô∫ËÉΩÈÖçÂØπËá™Âä®Â§ÑÁêÜÂ§çÊùÇÁöÑ‰∫§ÊòìÂØπÈÄâÊã©');
    console.log('   ‚Ä¢ ÈîôËØØÂ§ÑÁêÜÊèê‰æõÂèãÂ•ΩÁöÑÊõø‰ª£ÊñπÊ°àÂª∫ËÆÆ');
    
  } catch (error) {
    console.error('‚ùå ÊºîÁ§∫ËøáÁ®ã‰∏≠Âá∫Èîô:', error.message);
  }
}

// ËøêË°åÊºîÁ§∫
if (require.main === module) {
  demonstrateAdvancedFeatures()
    .then(() => {
      console.log('\nüëã ÊºîÁ§∫ÁªìÊùü');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå ÊºîÁ§∫Â§±Ë¥•:', error.message);
      process.exit(1);
    });
}

module.exports = { demonstrateAdvancedFeatures }; 